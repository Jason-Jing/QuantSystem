/*
 * \copyright Copyright 2015 All Rights Reserved.
 * \license @{
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @}
 */

#ifndef QUANTSYSTEM_COMMON_DATA_MARKET_TRADEBAR_H_
#define QUANTSYSTEM_COMMON_DATA_MARKET_TRADEBAR_H_

#include <string>
using std::string;
#include "quantsystem/common/data/base_data.h"
#include "quantsystem/common/base/integral_types.h"
#include "quantsystem/common/strings/stringpiece.h"
#include "quantsystem/common/time/date_time.h"
#include "quantsystem/common/data/subscription_data_config.h"

namespace quantsystem {
namespace data {
namespace market {
/**
 * TradeBar class for second and minute resolution data.
 *
 * @ingroup CommonBaseData
 */
class TradeBar : public BaseData {
 public:
  /**
   * Standard constructor.
   */
  TradeBar();

  /**
   * Copy constructor.
   */
  explicit TradeBar(const TradeBar& original);

  /**
   * Construct a trade bar parsing a line from CSV data sources.
   *
   * @param config Configuration class object for this data subscription
   * @param line CSV line from source data file
   * @param base_date Base Date of this tradebar line
   * @param datafeed Datafeed this CSV line is sourced from (backtesting or live
   */
  TradeBar(const SubscriptionDataConfig& config, const StringPiece& line,
           const DateTime& base_date, DataFeedEndpoint::Enum datafeed);

  /**
   * Construct a trade bar with OHLC values.
   *
   * @param time Timestamp of the bar
   * @param symbol MarketType symbol
   * @param open Opening price
   * @param high High price of this bar
   * @param low Low price of this bar
   * @param close Close price of this bar
   * @param volume Volume sum over day
   */
  TradeBar(const DateTime& time, const string& symbol, const double& open,
           const double& high, const double& low, const double& close,
           const int64& volume);

  /**
   * Standard destructor.
   */
  virtual ~TradeBar();

  /**
   * Convert data source into BaseData objects.
   *
   * Reader converts each line of the data source into BaseData objects.
   * Each data type creates its own factory method,
   * and returns a new instance of the object each time it is called.
   *
   * @param config Subscription data config setup object.
   * @param line Line of the source document.
   * @param date Date of the requested data.
   * @param datafeed Type of datafeed - a live or backtest feed.
   * @return Instance of BaseData object generated by this line of the CSV.
   */
  virtual BaseData* Reader(const SubscriptionDataConfig& config,
                          const StringPiece& line, const DateTime& date,
                          DataFeedEndpoint::Enum datafeed);

  /**
   * Get the URL stirng souce of the file.
   *
   * Return the URL string source of the file.
   * This will be converted to a stream.
   *
   * @param config Configuration object.
   * @param date Date of this souce file.
   * @param data_feed Type of datafeed - a live or backtest feed.
   * @retrurn URL of source file.
   */
  virtual string GetSource(const SubscriptionDataConfig& config,
                           const DateTime& date,
                           DataFeedEndpoint::Enum data_feed);

    /**
   * Update routine to build a bar/tick from a data update.
   *
   * @param last_trade The last trade price.
   * @param bid_price Current bid price.
   * @param ask_price Current asking price.
   * @param volume Current volume price.
   */
  virtual void Update(const double& last_trade, const double &bid_price,
                      const double& ask_price, const double& volume);

  /**
   * Return a new instance clone of this object.
   *
   * @return A new instance clone of this object.
   */
  virtual BaseData* Clone() const {
    return new TradeBar(*this);
  }

  int64 volume() const { return volume_; }
  void set_volume(const int64& volume) { volume_ = volume; }

  double open() const { return open_; }
  void set_open(const double& open) { open_ = open; }

  double high() const { return high_; }
  void set_high(const double& high) { high_ = high; }

  double low() const { return low_; }
  void set_low(const double& low) { low_ = low; }

  /**
   * Return the closing price of the TradeBar.
   */
  double close() const { return value(); }

  /**
   * Set the closing price.
   * @param value Closing price of the TradeBar: the price at
   * start time + timespan
   */
  void set_close(const double& value) { set_value(value); }

 private:
  int64 volume_;
  // Opening price of the bar: the price at the start of the time period
  double open_;
  // High price of the TradeBar during the time period
  double high_;
  // Low price of the TradeBar during the time period
  double low_;

  /**
   * Convert string to double and if convert fails. log the invalid input.
   * @param str Input string to be converted
   * @param[out] value The output value
   */
  void ConvertStringToDouble(const string& str, double* value);
};
}  // namespace market
}  // namespace data
}  // namespace quantsystem

#endif  // QUANTSYSTEM_COMMON_DATA_MARKET_TRADEBAR_H_
