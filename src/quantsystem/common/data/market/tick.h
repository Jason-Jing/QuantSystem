/*
 * \copyright Copyright 2015 All Rights Reserved.
 * \license @{
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @}
 */

#ifndef QUANTSYSTEM_COMMON_DATA_MARKET_TICK_H_
#define QUANTSYSTEM_COMMON_DATA_MARKET_TICK_H_

#include <string>
using std::string;
#include "quantsystem/common/global.h"
#include "quantsystem/common/strings/stringpiece.h"
#include "quantsystem/common/data/base_data.h"
#include "quantsystem/common/time/date_time.h"
#include "quantsystem/common/data/subscription_data_config.h"

namespace quantsystem {
namespace data {
namespace market {
/**
 * Tick class is the base represetation for tick data.
 * @ingroup CommonBaseData
 *
 * It is grouped into a Ticks object which implements Dictionary and
 * passed into an OnData event handler.
 */
class Tick : public BaseData {
 public:
  /**
   * Construct the tick class with default values.
   */
  Tick();

  /**
   * Copy constructor.
   */
  Tick(const Tick& original);

  /**
   * Construct a FOREX tick where there is no last sale price.
   * The volume in FX is so high its rare to find FX trade data.
   * Fake this tick contains bid-ask prices and the last price is the midpoint.
   *
   * @param time FX tick date time.
   * @param symbol Underlying currency
   * @param bid FX tick bid value
   * @param ask FX tick ask value
   */
  Tick(const DateTime& time, const string& symbol, const double& bid,
       const double& ask);

  /**
   * Construct a last-trade equity tick with bid or ask prices.
   *
   * @param time Tick data time
   * @param symbol Underlying equity security symbol
   * @param bid Bid value
   * @param ask Ask value
   * @param last Last trade price
   */
  Tick(const DateTime& time, const string& symbol, const double& last,
       const double& bid, const double& ask);

  /**
   * Construct a tick for FXCM Data source.
   *
   * @param symbol Underlying asset symbol
   * @param line CSV line of data from FXCM
   */
  Tick(const string& symbol, const StringPiece& line);
  
  /**
   * Construct a tick from zip source files.
   *
   * @param config Subscription configuration object
   * @param line CSV source line of the compressed source
   * @param date Base date for the tick
   * (ticks date is stored as int milliseconds since midnight)
   * @param datafeed Datefeed for tick - live or backtesting
   */
  Tick(const SubscriptionDataConfig& config, const StringPiece& line,
       const DateTime& date, DataFeedEndpoint::Enum datafeed);

  /**
   * Tick implementation of reader method: read a line of data from the
   * source and convert it to a tick object.
   *
   * @param config Subscription data config setup object.
   * @param line Line from the datafeed source.
   * @param date Date of the requested data.
   * @param datafeed Type of datafeed - a live or backtest feed.
   * @return Instance of BaseData object generated by this line of the CSV.
   */
  virtual BaseData* Reader(const SubscriptionDataConfig &config,
                          const StringPiece& line, const DateTime& date,
                           DataFeedEndpoint::Enum datafeed);

  /**
   * Get the URL stirng souce of the file.
   *
   * Return the URL string source of the file.
   * This will be converted to a stream.
   *
   * @param config Configuration object
   * @param date Date of this souce file
   * @param data_feed Type of datafeed - a live or backtest feed
   * @retrurn String source location of the file to be opened with a stream
   */
  virtual string GetSource(const SubscriptionDataConfig& config,
                           const DateTime& date,
                           DataFeedEndpoint::Enum data_feed);

  /**
   * Update the tick price information - not used.
   *
   * @param last_trade The last trade price
   * @param bid_price Current bid price
   * @param ask_price Current asking price
   * @param volume Current volume of this trade
   */
  virtual void Update(const double& last_trade, const double &bid_price,
                      const double& ask_price, const double& volume);

  /**
   * Clone implementation for tick class.
   *
   * @return A new instance clone of this object.
   */
  virtual BaseData* Clone() const {
    return new Tick(*this);
  }

  void set_tick_type(TickType tick_type) { tick_type_ = tick_type; }
  TickType tick_type() const { return tick_type_; }

  void set_quantity(int quantity) { quantity_ = quantity; }
  int quantity() const { return quantity_; }

  void set_exchange(const string& exchange) { exchange_ = exchange; }
  string exchange() const { return exchange_; }

  void set_sale_condition(const string& sale_condition) {
    sale_condition_ = sale_condition;
  }
  string sale_condition() const { return sale_condition_; }

  void set_suspicious(bool suspicious) { suspicious_ = suspicious; }
  bool suspicious() const { return suspicious_; }

  void set_bid_price(const double& bid_price) { bid_price_ = bid_price; }
  double bid_price() const { return bid_price_; }

  void set_ask_price(const double& ask_price) { ask_price_ = ask_price; }
  double ask_price() const { return ask_price_; }

  /**
   * Alias for "Value": the last sale for this asset.
   * @return the last sale for this asset
   */
  double last_price() { return value(); }

 private:
  // Type of the Tick: kTrade or kQuote, default: kTrade
  TickType tick_type_;
  // Quantity of the tick sale or quote offer
  int quantity_;
  // Exchange we are executing on.
  // Short string codes expanded in the MarketCodes dictionary
  string exchange_;
  // Sale condition for for the tick
  string sale_condition_;
  // Bool whether this a suspicious tick
  bool suspicious_;
  // Bid price for the Tick
  double bid_price_;
  // Asking price for the Tick
  double ask_price_;
};

}  // namespace market
}  // namespace data
}  // namespace quantsystem

#endif  // QUANTSYSTEM_COMMON_DATA_MARKET_TICK_H_
